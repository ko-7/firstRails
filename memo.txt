※※　このファイルのメモは「新規アプリ作成直後」に必要な知識についてです。　※※

〇新規アプリ作成の手順(ruby:3.0.1 rails:6.1.3.2で試した)
　手順１．新規アプリ作成
　　Rails _[バージョン指定]_ new [アプリ名] -d [DB指定]
　　　Ex）rails _5.2.4.6_ new firstRails -d mysql
      ※オプションを一切つけず、rails new [アプリ名]で新規アプリ作成するとrails s がすぐできる！
　　※必要に応じてwebpackerのインストール　※rails sをするために必要！
　　　rails webpacker:install
　手順２．model作成
　　　rails generate model [モデル名] [カラム⓵:データ型⓵ カラム⓶:データ型⓶]
　　 　Ex)rails generate model User name:string mail:string password:string
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　※パスを暗号化する場合は別の対応！
　　　　※必要に応じて「db/migrate/[timestamp]_create_[モデル名].rb」を編集する　←migrateするまでは変更できる！
　手順３．DBの作成　MySQLのコマンドでDBを作成する：create database [db名]
　　　　config/database.ymlでDB名&ユーザー名修正　※MySQLのユーザー：wsluser,バス：null
　手順４．マイグレーション実行
　　　　rake db:migrate
　手順５．コントローラの作成
　　　　rails generate controller [コントローラ名]
　　　　Ex）rails generate controller Users
　　　　※コントローラは基本的にmodelと１対１で対応するように作成する
　　　　※コントローラ名はmodel名を複数形にした名前をつける。
以降の流れ
　⓵コントローラに処理を書く         app/controllers/～.rb
　⓶routes.rbにルーティングを書く    config/routes.rb              get "URL" => "コントローラ名#アクション名"
　⓷viwsページを作成する             app/views/～/～.html.erb
　必要に応じてmodelにバリデーション等書く！


〇環境変数ファイルの作成＆呼び出し
　手順１．dotenvをインストールする
　　１）Gemfileに以下追記
　　　　　gem 'dotenv'
　　２）bundle install
　手順２．ルートディレクトリに.envファイル作成し環境変数を定義する
　　[環境変数名]=[値]
　　　Ex）DATABASE_USER=root
　手順３．環境変数を任意ファイルで呼び出す
　　<%= ENV['環境変数名'] %>
　　Ex）default: &default
　　　　　adapter: mysql2
  　　　　encoding: utf8mb4
　　　　　username: <%= ENV['DATABASE_USER'] %>
  　　　　password: <%= ENV['DATABASE_PASSWORD'] %>
  　　　　socket: /tmp/mysql.sock
  手順４．.envを.gitignoreに設定する
    ルートディレクトリ直下にある.envファイルの記述方法
  　Ex）/.env


〇ログインパスワードの暗号化
　手順１．モデル（マイグレーションファイル）に追加するカラム名はpassword_digestとする
　　　　　　Ex）rails generate model User name:string mail:string password_digest:tring
  手順２．app/models/～.rbファイルに１行追記する
  　　　　　has_secure_password
  手順３．bcryptというgemをインストールする　※bcrypt：ハッシュ化するための関数を提供しているライブラリ
  手順４．protect_from_forgeryをコントローラーに記述する


〇静的ファイルの作成　⇒コントローラのみ作成する！（モデルを作らない）
 rails generate controller [コントローラ名] [アクション名]
　Ex)rails generate controller StaticPages home


〇マイグレーションファイルの作成&マイグレーション実行　
　※既存カラムの修正は⓵rollback⓶migrationファイル修正⓷migration実行でもできる！！
　手順１．作成：rails g migration [マイグレーションファイル名]
　　　　　　Ex)rails g migration add_password_digist_to_users
　手順２．ファイル編集　db/migrate/[timestamp]_create_[モデル名].rbを編集する
　手順３．実行：rake db:migrate  　※アプリのルートディレクトリで実行する必要有り！（Rakefileのある階層）

〇マイグレーション関係のコマンド
　マイグレーション実施有無の確認：rails db:migrate:status
  マイグレーションを1つ前に戻す：rails db:rollback
  マイグレーションを任意の場所に戻す：rails db:rollback STEP=[数字]
  　Ex）rails db:rollback STEP=3　最新のマイグレーションファイルから数えて3つ目に戻る
  マイグレーションファイルの削除方法
  　⓵Downの状態にする
  　⓶ファイルを削除する！（コマンド不要！ファイルを削除！）
  DBをリセットし再migrate実行：rails db:migrate:reset
　シーディング：rails db:seed


